// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Enum definiálása a Rarity típushoz
enum Rarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

enum ResourceType {
  SILVER_BULLET
  BLOOD_DROP
}

// Card modell definiálása
model Card {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  image       String
  ability     Json
  health      Int
  defense     Int
  attack      Int
  rarity      Rarity
  tier        Int
  decks       Deck_Card[]
}

model Player {
  id           Int            @id @default(autoincrement())
  name         String
  cards        Player_Cards[]
  decks        Player_Decks[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  battle       Battle?        @relation(fields: [battleId], references: [id])
  battleId     Int?
  editedDeckId Int
  resources    Resource[]
}

model Resource {
  id        Int          @id @default(autoincrement())
  type      ResourceType // A resource típusa enum-ként
  playerId  Int
  player    Player       @relation(fields: [playerId], references: [id])
  quantity  Int // Mennyi erőforrás áll rendelkezésre
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([playerId, type])
}

model Player_Cards {
  id       Int    @id @default(autoincrement())
  player   Player @relation(fields: [playerId], references: [id])
  playerId Int
  cardId   Int // ID of the card in the card collection
  quantity Int // How many of this card the player owns
}

model Player_Decks {
  id       Int         @id @default(autoincrement())
  player   Player      @relation(fields: [playerId], references: [id])
  playerId Int
  name     String
  cards    Deck_Card[]
}

model Deck_Card {
  id       Int          @id @default(autoincrement())
  deck     Player_Decks @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId   Int
  card     Card         @relation(fields: [cardId], references: [id])
  cardId   Int // ID of the card in the card collection
  quantity Int // Number of this card in the deck
}

model Battle {
  id        Int      @id @default(autoincrement())
  players   Player[]
  state     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
